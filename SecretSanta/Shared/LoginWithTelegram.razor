@using Microsoft.Extensions.Hosting
@using Newtonsoft.Json.Linq
@using SecretSanta.Domain
@using SecretSanta.Domain.State
@using SecretSanta.Interop
@using System.Text.Json
@using SecretSanta.Domain.Data
@inject IHostEnvironment Environment
@inject IJSRuntime Js
@inject TelegramAuth Auth
@inject UserSantaEvents SantaEvents
@inject Persistence Persistence
@inject BotWrapper BotWrapper

@if (Environment.IsDevelopment())
{
    <h3>Mock login as</h3>
    <input @bind="MockValue">
    <button @onclick="MockLogin">Go</button>
}
else
{
    <div class="text-center">
        <h3 class="text-2xl font-bold">Log In With Telegram</h3>
    </div>
    
    <div class="flex justify-center m-5">
        @if(_showLoginButton) 
        {
        <script id="login" suppress-error="BL9992" src="https://telegram.org/js/telegram-widget.js?14" data-telegram-login="secret_santa_presents_bot" data-size="large" data-onauth="onTelegramAuth(user)"></script>
        <script suppress-error="BL9992" type="text/javascript">
          window.onTelegramAuth = (user) => {
          var ref = window.refs.updateTelegramLogin
          ref.invokeMethodAsync('LoginWithTelegram', user);
          var button = document.getElementById('telegram-login-secret_santa_presents_bot');
          button.parentElement.removeChild(button);
      }
      </script>
      }
    </div>
}




@code {
    private TelegramLoginInterop? _telegramLoginInterop;

    string _jsUpdateLoginRefId = "updateTelegramLogin";
    
    string? MockValue { get; set; }

    bool _showLoginButton;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _showLoginButton = true;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _telegramLoginInterop = new TelegramLoginInterop(Login);
        await Js.InvokeVoidAsync("setupDotnetRef", DotNetObjectReference.Create(_telegramLoginInterop), _jsUpdateLoginRefId);

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (Environment.IsDevelopment())
        {
            MockValue = "burningleg";
            await MockLogin();
        }
        
        await base.OnInitializedAsync();
    }

    private async Task Login(JsonElement receivedTelegramInfo)
    {
        var isValid = BotWrapper.IsValidPayload(receivedTelegramInfo);
        if (!isValid)
        {
            await Js.InvokeVoidAsync("alert", "Telegram payload is not valid");
            return;
        }

        var id = receivedTelegramInfo.GetProperty("id").GetInt64();
        var login = receivedTelegramInfo.GetProperty("username").GetString();
        await UpdateEvents(login);
        Auth.UpdateLogin(new TelegramId(id), new TelegramLogin(login));
    }

    async Task UpdateEvents(string login)
    {
        var events = await Persistence.GetEventsFor(login);
        foreach (var secretSantaEvent in events)
        {
            SantaEvents.AddEvent(secretSantaEvent);
        }
    }

    async Task MockLogin()
    {
        if (Environment.IsDevelopment() && !string.IsNullOrWhiteSpace(MockValue))
        {
            await UpdateEvents(MockValue);
            Auth.UpdateLogin(new TelegramId(1), new TelegramLogin(MockValue));
        }
    }
}
