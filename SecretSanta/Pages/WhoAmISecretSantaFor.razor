@page "/{Uid}/WhoAmISecretSantaFor"
@using SecretSanta.Domain.State
@using SecretSanta.Domain
@implements IDisposable

@inject UserSantaEvents SantaEvents
@inject TelegramAuth Auth

@if (SantaEvent == null || Opponent == null)
{
    <div>Sorry, could not find this event</div>
}
else
{
    <div class="text-center">
        <h3 class="text-2xl font-bold">@SantaEvent.Name</h3>
    </div>

    <h2 class="text-xl my-5">You should buy a present for <i><b>@Opponent.Name (@@@Opponent.TelegramLogin)</b></i></h2>
}

@code {
    [Parameter]
    public string Uid { get; set; }

    protected override void OnInitialized()
    {
        Auth.AuthChanged += OnAuthChanged;
        SantaEvents.SantaEventsChanged += OnSantaChanged;

        base.OnInitialized();
    }

    private void OnSantaChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnAuthChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Auth.AuthChanged -= OnAuthChanged;
        SantaEvents.SantaEventsChanged -= OnSantaChanged;
    }

    SecretSantaEvent? SantaEvent => SantaEvents.Events.FirstOrDefault(e => e.Uid.Equals(Uid));
    
    SecretSantaMember? Opponent => SantaEvents.Events.FirstOrDefault(e => e.Uid.Equals(Uid))?.GetFor(Auth?.Login?.Login);
}