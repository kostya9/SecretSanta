@page "/{Uid}/WhoAmISecretSantaFor"
@using SecretSanta.Domain.State
@using SecretSanta.Domain
@using System.Diagnostics.CodeAnalysis
@implements IDisposable

@inject UserSantaEvents SantaEvents
@inject TelegramAuth Auth

@if (SantaEvent == null || Opponent == null)
{
    <div>Sorry, could not find this event</div>
}
else
{
    <div class="text-center">
        <h3 class="text-2xl font-bold">@SantaEvent.Name</h3>
    </div>

    <div class="flex justify-center">
        <img class="object-scale-down w-12 sm:w-16 lg:w-24" src="img/present.png" alt="Present">
        <div class="flex justify-center flex-col p-5 text-center">
            <h2 class="text-xl">
                You should buy a present for
                <i>
                    <b>@Opponent.Name <a class="underline text-blue-400" target="_blank" href="https://t.me/@Opponent.TelegramLogin">@@@Opponent.TelegramLogin</a></b>
                </i>
            </h2>
        </div>
        <img class="object-scale-down x w-12 sm:w-16 lg:w-24" src="img/present.png" alt="Present">
    </div>

    @if(TryGetPrice(out var price))
    {
        <div>
            Please note that <b>recommended maximum price</b> for the present is <b>@price.Value @price.Currency</b>
        </div>
    }
}

@code {

    [Parameter]
    public string Uid { get; set; }

    private bool TryGetPrice([NotNullWhen(true)] out MaxPrice? price)
    {
        price = null;

        return SantaEvent?.Metadata.TryGetPrice(out price) ?? false;
    }

    protected override void OnInitialized()
    {
        Auth.AuthChanged += OnAuthChanged;
        SantaEvents.SantaEventsChanged += OnSantaChanged;

        base.OnInitialized();
    }

    private void OnSantaChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnAuthChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Auth.AuthChanged -= OnAuthChanged;
        SantaEvents.SantaEventsChanged -= OnSantaChanged;
    }

    SecretSantaEvent? SantaEvent => SantaEvents.Events.FirstOrDefault(e => e.Uid.Equals(Uid));

    SecretSantaMember? Opponent => SantaEvents.Events.FirstOrDefault(e => e.Uid.Equals(Uid))?.GetOpponentFor(Auth?.Login?.Login);
}