@page "/{Uid}/selected"

@using SecretSanta.Domain.Data
@using SecretSanta.Domain.State
@using SecretSanta.Domain
@using System.Diagnostics.CodeAnalysis
@inject Persistence Persistence
@inject UserSantaEvents SantaEvents
@inject TelegramAuth TelegramAuth
@inject NavigationManager Navigation
@inject IJSRuntime Js

<div class="text-2xl font-bold text-center">
    @Name
</div>

<div class="space-y-5">
    <div>
        Click below to copy this link. Share this link with other members - they will see their opponents!
    </div>

    <div class="border-2 border-red-500 p-2 bg-red-300 cursor-pointer break-all" @onclick="CopyToClipboard">
        @OpponentUrl
    </div>
    @if (_copied)
    {
        <div class="text-sm text-red-500">Copied</div>
    }

    <Button OnClick="GoToOpponent">See your opponent</Button>
</div>

<div class="flex flex-wrap flex-1 p-3 justify-center">
    @foreach (var (name, telegramLogin) in Members)
    {
        <div class="bg-red-50 rounded w-96 p-3 m-3">
            <div>Name: @name</div>
            <div>Telegram Username: @telegramLogin</div>
        </div>
    }
</div>

@if(TryGetPrice(out var price)) 
{
    <div class="bg-red-100 p-3">
        Recommended Max Price: @price.Value @price.Currency
    </div>
}

@if(IsOwner)
{
    <div class="my-5 bg-red-50 p-3">
        <label>
            Archived?
            <input type="checkbox" @onchange="(args) => SetArchived(args)" checked=@Selected.Archived />
        </label>
    </div>
}

@code {

    [Parameter]
    public string Uid { get; set; }

    private bool _copied;

    private IEnumerable<SecretSantaMember> Members => Selected?.TelegramUsers ?? Array.Empty<SecretSantaMember>();

    private bool IsOwner => Selected?.IsOwner(TelegramAuth.Login.Login) ?? false;

    private SecretSantaEvent Selected { get; set; }

    private bool TryGetPrice([NotNullWhen(true)] out MaxPrice? price)
    {
        price = null;

        return Selected?.Metadata.TryGetPrice(out price) ?? false;
    }

    private async Task SetArchived(ChangeEventArgs args)
    {
        var archived = (bool)args.Value;
        Selected.SetArchived(archived);
        await Persistence.SaveArchived(Selected);

    }

    protected override void OnParametersSet()
    {
        Selected = SantaEvents.Events.FirstOrDefault(e => e.Uid == Uid);
        if (Selected == null)
        {
            Navigation.NavigateTo("/");
        }
        base.OnParametersSet();
    }

    private string RelativeOpponentUrl => $"/{Uid}/WhoAmISecretSantaFor";

    private string OpponentUrl => Navigation.ToAbsoluteUri(RelativeOpponentUrl).ToString();

    private string Name => Selected?.Name ?? string.Empty;

    private async Task CopyToClipboard()
    {
        await Js.InvokeVoidAsync("navigator.clipboard.writeText", OpponentUrl);
        _copied = true;
    }

    private void GoToOpponent()
    {
        Navigation.NavigateTo(RelativeOpponentUrl);
    }

}